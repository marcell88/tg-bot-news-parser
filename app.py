import asyncio
import logging
import signal
from services.listener import main as run_listener
from services.cleaner import main as run_cleaner
from services.analyzer import main as run_analyzer
from services.finisher import main as run_finisher
from services.stats import main as run_stats
from database import Database

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞.
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class ServiceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Å–ª—É–∂–±–∞–º–∏."""
    
    def __init__(self):
        self.tasks = []
        self.is_running = True
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {signum}")
        self.is_running = False

    async def start_services(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–ª—É–∂–±—ã."""
        services = [
            ("Listener", run_listener),
            ("Cleaner", run_cleaner),
            ("Analyzer", run_analyzer),
            ("Finisher", run_finisher),
            ("Stats", run_stats),
        ]
        
        for name, service_func in services:
            task = asyncio.create_task(self._run_service(name, service_func))
            self.tasks.append(task)
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏

    async def _run_service(self, name: str, service_func):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω—É —Å–ª—É–∂–±—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã {name}...")
            await service_func()
        except asyncio.CancelledError:
            logging.info(f"–°–ª—É–∂–±–∞ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª—É–∂–±–µ {name}: {e}")

    async def stop_services(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Å–ª—É–∂–±—ã."""
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–ª—É–∂–±...")
        for task in self.tasks:
            if not task.done():
                task.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        if self.tasks:
            await asyncio.gather(*self.tasks, return_exceptions=True)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        await Database.close()

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã."""
        try:
            await self.start_services()
            
            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
            while self.is_running:
                await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            logging.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt")
        finally:
            await self.stop_services()

async def main_services():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–ª—É–∂–±—ã —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä."""
    manager = ServiceManager()
    await manager.run()

def start_application():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        asyncio.run(main_services())
    except KeyboardInterrupt:
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
    except Exception as e:
        logging.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ app.py: {e}")
    finally:
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É.")

if __name__ == '__main__':
    start_application()