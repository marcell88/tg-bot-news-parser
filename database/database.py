# database/database.py
import asyncpg
import logging
from typing import Optional
from database.database_config import DatabaseConfig

class Database:
    """
    –ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –¥–ª—è –≤—Å–µ—Ö —Å–ª—É–∂–±.
    –° –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—É–ª–æ–º –¥–ª—è embedder –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.
    """
    _pool: Optional[asyncpg.Pool] = None
    _embedder_pool: Optional[asyncpg.Pool] = None  # <-- –û–¢–î–ï–õ–¨–ù–´–ô –ü–£–õ –î–õ–Ø EMBEDDER
    _initialized = False
    
    @classmethod
    async def get_pool(cls) -> asyncpg.Pool:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É–∂–±.
        """
        if cls._pool is None:
            logging.info("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î...")
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
                logging.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:")
                logging.info(f"  –•–æ—Å—Ç: {DatabaseConfig.DB_HOST}")
                logging.info(f"  –ü–æ—Ä—Ç: {DatabaseConfig.DB_PORT}")
                logging.info(f"  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DatabaseConfig.DB_NAME}")
                logging.info(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {DatabaseConfig.DB_USER}")
                logging.info(f"  SSL: require")
                logging.info(f"  –†–∞–∑–º–µ—Ä –ø—É–ª–∞: min=2, max=8")
                
                cls._pool = await asyncpg.create_pool(
                    user=DatabaseConfig.DB_USER,
                    password=DatabaseConfig.DB_PASS,
                    database=DatabaseConfig.DB_NAME,
                    host=DatabaseConfig.DB_HOST,
                    port=DatabaseConfig.DB_PORT,
                    ssl='require',
                    min_size=2,
                    max_size=8,
                    max_inactive_connection_lifetime=60
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                async with cls._pool.acquire() as test_conn:
                    db_version = await test_conn.fetchval("SELECT version();")
                    logging.info(f"‚úÖ –û–±—â–∏–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    logging.info(f"   –í–µ—Ä—Å–∏—è –ë–î: {db_version.split(',')[0]}")
                    
            except Exception as e:
                logging.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ –ë–î: {e}")
                logging.critical(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ database_config.py")
                logging.critical(f"   –•–æ—Å—Ç: {DatabaseConfig.DB_HOST}:{DatabaseConfig.DB_PORT}")
                logging.critical(f"   –ë–∞–∑–∞: {DatabaseConfig.DB_NAME}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {DatabaseConfig.DB_USER}")
                raise
        
        return cls._pool
    
    @classmethod
    async def get_embedder_pool(cls) -> asyncpg.Pool:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Å–ª—É–∂–±—ã embedder.
        –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å –≤–µ–∫—Ç–æ—Ä–∞–º–∏.
        """
        if cls._embedder_pool is None:
            logging.info("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è embedder...")
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è embedder
                logging.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è embedder:")
                logging.info(f"  –•–æ—Å—Ç: {DatabaseConfig.DB_HOST}")
                logging.info(f"  –ü–æ—Ä—Ç: {DatabaseConfig.DB_PORT}")
                logging.info(f"  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DatabaseConfig.DB_NAME}")
                logging.info(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {DatabaseConfig.DB_USER}")
                logging.info(f"  –†–∞–∑–º–µ—Ä –ø—É–ª–∞: min=2, max=4")
                logging.info(f"  –¢–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥—ã: 300s")
                
                cls._embedder_pool = await asyncpg.create_pool(
                    user=DatabaseConfig.DB_USER,
                    password=DatabaseConfig.DB_PASS,
                    database=DatabaseConfig.DB_NAME,
                    host=DatabaseConfig.DB_HOST,
                    port=DatabaseConfig.DB_PORT,
                    ssl='require',
                    min_size=2,           # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                    max_size=4,           # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ - –º–µ–Ω—å—à–µ —á–µ–º —É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—É–ª–∞
                    max_inactive_connection_lifetime=120,  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
                    command_timeout=300,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–æ–ª–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                    max_queries=50000     # –ë–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è embedder
                async with cls._embedder_pool.acquire() as test_conn:
                    db_name = await test_conn.fetchval("SELECT current_database();")
                    logging.info(f"‚úÖ –û—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è embedder —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    logging.info(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ë–î: {db_name}")
                    
            except Exception as e:
                logging.critical(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ embedder –ë–î: {e}")
                logging.warning("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É–ª –¥–ª—è embedder")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É–ª
                return await cls.get_pool()
        
        return cls._embedder_pool
    
    @classmethod
    async def initialize_database(cls):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
        –î–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –û–î–ò–ù —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        if cls._initialized:
            logging.debug("–ë–î —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
            return
            
        logging.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            pool = await cls.get_pool()
            logging.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")
        except Exception as e:
            logging.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise

        async with pool.acquire() as conn:
            logging.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS telegram_posts (
                        id BIGSERIAL PRIMARY KEY,
                        post_time TIMESTAMP WITH TIME ZONE NOT NULL, 
                        text_content TEXT NOT NULL,
                        message_link TEXT,
                        finished BOOLEAN DEFAULT FALSE,
                        analyzed BOOLEAN DEFAULT FALSE,
                        filter_initial BOOLEAN,
                        filter_initial_explain TEXT,
                        context BOOLEAN,
                        context_score REAL,
                        context_explain TEXT,
                        essence BOOLEAN,
                        essence_score REAL,
                        essence_explain TEXT                    
                    );
                """)
                logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'telegram_posts' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
                await cls._check_table_columns(conn, 'telegram_posts', cls._get_main_table_columns())
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π 'telegram_posts': {e}")
                raise
                
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ç–æ–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS telegram_posts_top (
                        id BIGSERIAL PRIMARY KEY,
                        post_time TIMESTAMP WITH TIME ZONE NOT NULL, 
                        text_content TEXT NOT NULL,
                        message_link TEXT,
                        
                        tag1 TEXT,
                        tag2 TEXT,
                        tag3 TEXT,
                        tag4 TEXT,
                        tag5 TEXT,
                        
                        vector1 vector(384),
                        vector2 vector(384),
                        vector3 vector(384),
                        vector4 vector(384),
                        vector5 vector(384),
                        
                        taged BOOLEAN DEFAULT FALSE,
                        analyzed BOOLEAN DEFAULT FALSE,
                        coincide_24hr REAL,
                        essence REAL,
                        final_score REAL,
                        final BOOLEAN DEFAULT FALSE,
                        finished BOOLEAN DEFAULT FALSE,

                        tag1_score REAL,
                        tag2_score REAL,
                        tag3_score REAL,
                        tag4_score REAL,
                        tag5_score REAL
                    );
                """)
                logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'telegram_posts_top' —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ç–æ–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                await cls._check_table_columns(conn, 'telegram_posts_top', cls._get_top_table_columns())
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π 'telegram_posts_top': {e}")
                raise
            
        cls._initialized = True
        logging.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    @classmethod
    def _get_main_table_columns(cls):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
        return {
            'id': 'BIGSERIAL PRIMARY KEY',
            'post_time': 'TIMESTAMP WITH TIME ZONE NOT NULL',
            'text_content': 'TEXT NOT NULL',
            'message_link': 'TEXT',
            'finished': 'BOOLEAN DEFAULT FALSE',
            'analyzed': 'BOOLEAN DEFAULT FALSE',
            'filter_initial': 'BOOLEAN',
            'filter_initial_explain': 'TEXT',
            'context': 'BOOLEAN',
            'context_score': 'REAL',
            'context_explain': 'TEXT',
            'essence': 'BOOLEAN',
            'essence_score': 'REAL',
            'essence_explain': 'TEXT'
        }
    
    @classmethod
    def _get_top_table_columns(cls):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        return {
            'id': 'BIGSERIAL PRIMARY KEY',
            'post_time': 'TIMESTAMP WITH TIME ZONE NOT NULL',
            'text_content': 'TEXT NOT NULL',
            'message_link': 'TEXT',
            
            'tag1': 'TEXT',
            'tag2': 'TEXT',
            'tag3': 'TEXT',
            'tag4': 'TEXT',
            'tag5': 'TEXT',
            
            'vector1': 'vector(384)',
            'vector2': 'vector(384)',
            'vector3': 'vector(384)',
            'vector4': 'vector(384)',
            'vector5': 'vector(384)',
            
            'taged': 'BOOLEAN DEFAULT FALSE',
            'analyzed': 'BOOLEAN DEFAULT FALSE',
            'coincide_24hr': 'REAL',
            'essence': 'REAL',
            'final_score': 'REAL',
            'final': 'BOOLEAN DEFAULT FALSE',
            'finished': 'BOOLEAN DEFAULT FALSE',

            'tag1_score': 'REAL',
            'tag2_score': 'REAL',
            'tag3_score': 'REAL',
            'tag4_score': 'REAL',
            'tag5_score': 'REAL',
        }
    
    @classmethod
    async def _check_table_columns(cls, conn, table_name: str, required_columns: dict):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ.
        """
        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã '{table_name}'...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–±—Ü–∞—Ö —Ç–∞–±–ª–∏—Ü—ã
            columns = await conn.fetch("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = $1
            """, table_name)
            
            existing_columns = {row['column_name'] for row in columns}
            missing_columns = set(required_columns.keys()) - existing_columns
            
            if missing_columns:
                logging.warning(f"‚ö†Ô∏è  –í —Ç–∞–±–ª–∏—Ü–µ '{table_name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {missing_columns}")
                # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –î–û–ë–ê–í–õ–Ø–ï–ú –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
                await cls._add_missing_columns(conn, table_name, missing_columns, required_columns)
            else:
                logging.info(f"‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'")
                logging.debug(f"   –°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {existing_columns}")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {e}")
            raise
    
    @classmethod
    async def _add_missing_columns(cls, conn, table_name: str, missing_columns: set, column_definitions: dict):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.
        """
        logging.info(f"üîß –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}'...")
        added_columns = []
        
        for column in missing_columns:
            if column in column_definitions:
                try:
                    # –î–ª—è —Å—Ç–æ–ª–±—Ü–∞ 'id' –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω PRIMARY KEY
                    if column == 'id':
                        continue
                        
                    await conn.execute(f"""
                        ALTER TABLE {table_name} 
                        ADD COLUMN {column} {column_definitions[column]}
                    """)
                    added_columns.append(column)
                    logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü '{column}' –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}'")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ '{column}' –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}': {e}")
        
        if added_columns:
            logging.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}': {added_columns}")
        else:
            logging.info(f"‚ÑπÔ∏è  –ù–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}'")
    
    @classmethod
    async def test_connection(cls):
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å.
        """
        try:
            pool = await cls.get_pool()
            async with pool.acquire() as conn:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                result = await conn.fetchval("SELECT 1")
                if result == 1:
                    logging.info("‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: –£–°–ü–ï–•")
                    return True
                else:
                    logging.error("‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê")
                    return False
        except Exception as e:
            logging.critical(f"‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: –û–®–ò–ë–ö–ê - {e}")
            return False
    
    @classmethod
    async def close(cls):
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø—É–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –ë–î...")
        
        if cls._pool:
            await cls._pool.close()
            cls._pool = None
            logging.info("‚úÖ –û–±—â–∏–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –∑–∞–∫—Ä—ã—Ç")
            
        if cls._embedder_pool:
            await cls._embedder_pool.close()
            cls._embedder_pool = None
            logging.info("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π embedder –∑–∞–∫—Ä—ã—Ç")
            
        cls._initialized = False
        logging.info("‚úÖ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∑–∞–∫—Ä—ã—Ç—ã")