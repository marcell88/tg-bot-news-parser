# services/stats.py
import asyncio
import logging
import os
import asyncpg
import json
import re
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from database.database import Database
from database.database_config import DatabaseConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class Config:
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–ª—É–∂–±—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    DB_HOST = DatabaseConfig.DB_HOST
    DB_PORT = DatabaseConfig.DB_PORT
    DB_NAME = DatabaseConfig.DB_NAME
    DB_USER = DatabaseConfig.DB_USER
    DB_PASS = DatabaseConfig.DB_PASS
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Bot API
    STATS_BOT_API_KEY = os.getenv('STATS_BOT_API_KEY', '')
    
    # –§–∞–π–ª —Å –∫–∞–Ω–∞–ª–∞–º–∏
    CHANNELS_FILE = 'monitored_channels.json'

class StatsService:
    """
    –°–ª—É–∂–±–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.
    """
    def __init__(self):
        self.db_pool = None
        self.bot_app = None
        self.is_running = False
        logging.info("StatsService: –°–ª—É–∂–±–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    async def _setup_database(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        logging.info("StatsService: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        try:
            self.db_pool = await Database.get_pool()
            logging.info("StatsService: –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        except Exception as e:
            logging.critical(f"StatsService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î: {e}")
            raise

    async def _setup_bot(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –±–æ—Ç–∞."""
        if not Config.STATS_BOT_API_KEY:
            logging.error("StatsService: STATS_BOT_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False

        try:
            self.bot_app = Application.builder().token(Config.STATS_BOT_API_KEY).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.bot_app.add_handler(CommandHandler("start", self._start_command))
            self.bot_app.add_handler(CommandHandler("stats", self._stats_command))
            self.bot_app.add_handler(CommandHandler("channels", self._channels_command))
            self.bot_app.add_handler(CommandHandler("distr", self._distr_command))
            
            logging.info("StatsService: –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
            return True
        except Exception as e:
            logging.error(f"StatsService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞: {e}")
            return False

    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        welcome_text = """
ü§ñ –ë–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/stats - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
/distr - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ essence_score (–Ω–∞–ø—Ä–∏–º–µ—Ä /distr 5.0)
/channels - –°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏—Ö—Å—è –∫–∞–Ω–∞–ª–æ–≤

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö —Å –ø–æ–º–æ—â—å—é AI.
        """
        await update.message.reply_text(welcome_text)

    async def _channels_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /channels."""
        try:
            if not os.path.exists(Config.CHANNELS_FILE):
                await update.message.reply_text("üìã –§–∞–π–ª —Å –∫–∞–Ω–∞–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            with open(Config.CHANNELS_FILE, 'r', encoding='utf-8') as f:
                channels_data = json.load(f)

            if not channels_data:
                await update.message.reply_text("üìã –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–Ω–∞–ª–∞–º–∏
            message = "üìã –ú–æ–Ω–∏—Ç–æ—Ä—è—â–∏–µ—Å—è –∫–∞–Ω–∞–ª—ã:\n\n"
            for i, channel in enumerate(channels_data[:50], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 50 –∫–∞–Ω–∞–ª–∞–º–∏
                username = f"@{channel['username']}" if channel['username'] else "–±–µ–∑ username"
                message += f"{i}. {channel['title']}\n   ID: {channel['id']} ‚Ä¢ {username}\n\n"

            if len(channels_data) > 50:
                message += f"\n... –∏ –µ—â–µ {len(channels_data) - 50} –∫–∞–Ω–∞–ª–æ–≤"

            await update.message.reply_text(message)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /channels: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.")

    async def _get_database_size(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
        try:
            async with self.db_pool.acquire() as conn:
                # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ë–î
                size_bytes = await conn.fetchval("SELECT pg_database_size($1)", Config.DB_NAME)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                if size_bytes >= 1024**3:  # GB
                    return f"{size_bytes / (1024**3):.2f} GB"
                elif size_bytes >= 1024**2:  # MB
                    return f"{size_bytes / (1024**2):.2f} MB"
                elif size_bytes >= 1024:  # KB
                    return f"{size_bytes / 1024:.2f} KB"
                else:
                    return f"{size_bytes} bytes"
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –ë–î: {e}")
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    async def _distr_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /distr –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ essence_score."""
        try:
            if not self.db_pool:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä
            if not context.args:
                await update.message.reply_text(
                    "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è essence_score\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: /distr 5.0 –∏–ª–∏ /distr 7.5"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            score_text = context.args[0]
            
            try:
                min_score = float(score_text)
                if min_score < 0 or min_score > 10:
                    await update.message.reply_text("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 10")
                    return
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /distr 5.0 –∏–ª–∏ /distr 6.1")
                return

            async with self.db_pool.acquire() as conn:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                total_count = await conn.fetchval("SELECT COUNT(*) FROM telegram_posts")
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å essence_score >= —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                score_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE essence_score >= $1", 
                    min_score
                )
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
                score_percent = (score_count / total_count * 100) if total_count > 0 else 0

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            score_message = f"""
üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ essence_score

–ó–∞–ø—Ä–æ—Å: —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ü–µ–Ω–∫–æ–π >= {min_score}

–†–µ–∑—É–ª—å—Ç–∞—Ç:
‚Ä¢ –ë–æ–ª—å—à–µ {min_score} –±–∞–ª–ª–æ–≤: {score_percent:.1f}% ({score_count}/{total_count})
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ: {total_count}
            """.strip()

            await update.message.reply_text(score_message)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /distr {score_text}: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ü–µ–Ω–∫–∞–º.")

    async def _stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats."""
        try:
            if not self.db_pool:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")
                return

            async with self.db_pool.acquire() as conn:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                total_count = await conn.fetchval("SELECT COUNT(*) FROM telegram_posts")
                last_id = await conn.fetchval("SELECT MAX(id) FROM telegram_posts")
                
                # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
                week_ago = datetime.now() - timedelta(days=7)
                week_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE post_time >= $1", 
                    week_ago
                )
                
                # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                day_ago = datetime.now() - timedelta(days=1)
                day_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE post_time >= $1", 
                    day_ago
                )
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–æ–±—â–∞—è)
                filter1_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE filter_initial = true"
                )
                filter2_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE filter_initial = true AND context = true"
                )
                filter3_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE filter_initial = true AND context = true AND essence = true"
                )
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞ 24 —á–∞—Å–∞
                day_filter1_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE filter_initial = true AND post_time >= $1", 
                    day_ago
                )
                day_filter2_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE filter_initial = true AND context = true AND post_time >= $1", 
                    day_ago
                )
                day_filter3_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE filter_initial = true AND context = true AND essence = true AND post_time >= $1", 
                    day_ago
                )
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã (–æ–±—â–∏–µ)
                filter1_percent = (filter1_count / total_count * 100) if total_count > 0 else 0
                filter2_percent = (filter2_count / total_count * 100) if total_count > 0 else 0
                filter3_percent = (filter3_count / total_count * 100) if total_count > 0 else 0
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∑–∞ 24 —á–∞—Å–∞
                day_filter1_percent = (day_filter1_count / day_count * 100) if day_count > 0 else 0
                day_filter2_percent = (day_filter2_count / day_count * 100) if day_count > 0 else 0
                day_filter3_percent = (day_filter3_count / day_count * 100) if day_count > 0 else 0

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ë–î
            db_size = await self._get_database_size()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_message = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:
‚Ä¢ –í—Å–µ–≥–æ: {last_id or 0}
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_count}
‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {day_count}
‚Ä¢ –†–∞–∑–º–µ—Ä –ë–î: {db_size}

–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–≤—Å–µ –≤—Ä–µ–º—è):
‚úÖ –§–∏–ª—å—Ç—Ä 1 (–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç): {filter1_percent:.1f}% ({filter1_count}/{total_count})
‚úÖ –§–∏–ª—å—Ç—Ä 2 (–µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç): {filter2_percent:.1f}% ({filter2_count}/{total_count})
‚úÖ –§–∏–ª—å—Ç—Ä 3 (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ): {filter3_percent:.1f}% ({filter3_count}/{total_count})

–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:
üïê –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã: {day_filter3_percent:.1f}% ({day_filter3_count}/{day_count})

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/distr 5.0 - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ essence_score
            """.strip()

            await update.message.reply_text(stats_message)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /stats: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    async def run_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π."""
        if not self.bot_app:
            logging.error("StatsService: –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∑–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            return

        try:
            logging.info("StatsService: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            self.is_running = True
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
            await self.bot_app.initialize()
            await self.bot_app.start()
            await self.bot_app.updater.start_polling()
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
            while self.is_running:
                await asyncio.sleep(1)
                
        except asyncio.CancelledError:
            logging.info("StatsService: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
        except Exception as e:
            if "Conflict" in str(e):
                logging.warning("StatsService: –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫.")
            else:
                logging.error(f"StatsService: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        finally:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            try:
                if hasattr(self, 'bot_app') and self.bot_app:
                    if hasattr(self.bot_app, 'updater') and self.bot_app.updater:
                        await self.bot_app.updater.stop()
                    await self.bot_app.stop()
                    await self.bot_app.shutdown()
            except Exception as e:
                logging.error(f"StatsService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
            
            logging.info("StatsService: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É–∂–±—É."""
        self.is_running = False
        logging.info("StatsService: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±—ã...")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã."""
        try:
            await self._setup_database()
            if await self._setup_bot():
                await self.run_bot()
            else:
                logging.error("StatsService: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞, —Å–ª—É–∂–±–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        except Exception as e:
            logging.critical(f"StatsService: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await self.stop()

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–ª—É–∂–±—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    stats_service = StatsService()
    await stats_service.run()

if __name__ == "__main__":
    asyncio.run(main())