import asyncio
import logging
import os
import asyncpg
import json
from datetime import datetime, timedelta
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class Config:
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–ª—É–∂–±—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    DB_HOST = os.getenv('DB_HOST', 'telegram-parsed-db-marcell88.db-msk0.amvera.tech')
    DB_PORT = int(os.getenv('DB_PORT', 5432))
    DB_NAME = os.getenv('DB_NAME', 'tg-parsed-db')
    DB_USER = os.getenv('DB_USER', 'marcell')
    DB_PASS = os.getenv('DB_PASS', '12345')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Bot API
    STATS_BOT_API_KEY = os.getenv('STATS_BOT_API_KEY', '')
    
    # –§–∞–π–ª —Å –∫–∞–Ω–∞–ª–∞–º–∏
    CHANNELS_FILE = 'monitored_channels.json'

class StatsService:
    """
    –°–ª—É–∂–±–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.
    """
    def __init__(self):
        self.db_pool = None
        self.bot_app = None
        logging.info("StatsService: –°–ª—É–∂–±–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    async def _setup_database(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        logging.info("StatsService: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        try:
            self.db_pool = await Database.get_pool()
            logging.info("StatsService: –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        except Exception as e:
            logging.critical(f"StatsService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î: {e}")
            raise

    async def _setup_bot(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Telegram –±–æ—Ç–∞."""
        if not Config.STATS_BOT_API_KEY:
            logging.error("StatsService: STATS_BOT_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False

        try:
            self.bot_app = Application.builder().token(Config.STATS_BOT_API_KEY).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.bot_app.add_handler(CommandHandler("start", self._start_command))
            self.bot_app.add_handler(CommandHandler("stats", self._stats_command))
            self.bot_app.add_handler(CommandHandler("channels", self._channels_command))
            
            logging.info("StatsService: –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
            return True
        except Exception as e:
            logging.error(f"StatsService: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞: {e}")
            return False

    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        welcome_text = """
ü§ñ *–ë–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
/channels - –°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏—Ö—Å—è –∫–∞–Ω–∞–ª–æ–≤

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö —Å –ø–æ–º–æ—â—å—é AI.
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def _channels_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /channels."""
        try:
            if not os.path.exists(Config.CHANNELS_FILE):
                await update.message.reply_text("üìã –§–∞–π–ª —Å –∫–∞–Ω–∞–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            with open(Config.CHANNELS_FILE, 'r', encoding='utf-8') as f:
                channels_data = json.load(f)

            if not channels_data:
                await update.message.reply_text("üìã –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–Ω–∞–ª–∞–º–∏
            message = "üìã *–ú–æ–Ω–∏—Ç–æ—Ä—è—â–∏–µ—Å—è –∫–∞–Ω–∞–ª—ã:*\n\n"
            for i, channel in enumerate(channels_data[:50], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 50 –∫–∞–Ω–∞–ª–∞–º–∏
                username = f"@{channel['username']}" if channel['username'] else "–±–µ–∑ username"
                message += f"{i}. {channel['title']}\n   ID: `{channel['id']}` ‚Ä¢ {username}\n\n"

            if len(channels_data) > 50:
                message += f"\n... –∏ –µ—â–µ {len(channels_data) - 50} –∫–∞–Ω–∞–ª–æ–≤"

            await update.message.reply_text(message, parse_mode='Markdown')

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /channels: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.")

    async def _stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats."""
        try:
            if not self.db_pool:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")
                return

            async with self.db_pool.acquire() as conn:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                total_count = await conn.fetchval("SELECT COUNT(*) FROM telegram_posts")
                last_id = await conn.fetchval("SELECT MAX(id) FROM telegram_posts")
                
                # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
                week_ago = datetime.now() - timedelta(days=7)
                week_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE post_time >= $1", 
                    week_ago
                )
                
                # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                day_ago = datetime.now() - timedelta(days=1)
                day_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE post_time >= $1", 
                    day_ago
                )
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                filter1_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE filter_initial = true"
                )
                filter2_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE filter_initial = true AND context = true"
                )
                filter3_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM telegram_posts WHERE filter_initial = true AND context = true AND essence = true"
                )
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                filter1_percent = (filter1_count / total_count * 100) if total_count > 0 else 0
                filter2_percent = (filter2_count / total_count * 100) if total_count > 0 else 0
                filter3_percent = (filter3_count / total_count * 100) if total_count > 0 else 0

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_message = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞*

*–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:*
‚Ä¢ –í—Å–µ–≥–æ: `{total_count}`
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: `{week_count}`
‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: `{day_count}`
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: `{last_id or 0}`

*–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤:*
‚úÖ –§–∏–ª—å—Ç—Ä 1 (–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç): `{filter1_percent:.1f}%` ({filter1_count}/{total_count})
‚úÖ –§–∏–ª—å—Ç—Ä 2 (–µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç): `{filter2_percent:.1f}%` ({filter2_count}/{total_count})
‚úÖ –§–∏–ª—å—Ç—Ä 3 (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ): `{filter3_percent:.1f}%` ({filter3_count}/{total_count})

*–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:*
üü¢ –ü—Ä–æ—à–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã: `{filter3_count} —Å–æ–æ–±—â–µ–Ω–∏–π`
            """.strip()

            await update.message.reply_text(stats_message, parse_mode='Markdown')

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /stats: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    async def run_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        if not self.bot_app:
            logging.error("StatsService: –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∑–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            return

        try:
            logging.info("StatsService: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            await self.bot_app.run_polling()
        except Exception as e:
            logging.error(f"StatsService: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã."""
        try:
            await self._setup_database()
            if await self._setup_bot():
                await self.run_bot()
            else:
                logging.error("StatsService: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞, —Å–ª—É–∂–±–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        except Exception as e:
            logging.critical(f"StatsService: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–ª—É–∂–±—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    stats_service = StatsService()
    await stats_service.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("StatsService: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")