import asyncio
# deque (double-ended queue) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é (–±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å –∫–æ–Ω—Ü–æ–≤).
from collections import deque 
from datetime import datetime, timedelta
# TelegramClient - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API Telegram.
# events - –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π).
from telethon import TelegramClient, events
# –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
from telethon.tl.types import Message, Channel, User, PeerChannel, PeerUser
# StringSession –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–µ—Å—Å–∏—é –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
from telethon.sessions import StringSession
import logging
import json
import os 
# asyncpg - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä PostgreSQL.
import asyncpg 
from database.database import Database
from database.database_config import DatabaseConfig

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (INFO, ERROR –∏ —Ç.–¥.) —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º.
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
class Config:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. 
    –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—Ä–∞–Ω—ã –∑–¥–µ—Å—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    """
    # API_ID –∏ API_HASH - —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram API (–ø–æ–ª—É—á–µ–Ω—ã –Ω–∞ my.telegram.org).
    API_ID = 25491744
    API_HASH = '0643451ea49fcac6f5a8697005714e33'

    # PRIVATE_GROUP_ID - ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã, —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –±–æ—Ç—É-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—É.
    PRIVATE_GROUP_ID = -1003130125238
    # BOT_USERNAME - —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã.
    BOT_USERNAME = '@trigger_prosa_bot'

    # CHANNELS_FILE - –∏–º—è —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏—Ö—Å—è –∫–∞–Ω–∞–ª–æ–≤.
    CHANNELS_FILE = 'monitored_channels.json'

    # CHANNELS_UPDATE_INTERVAL_MINUTES - –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    CHANNELS_UPDATE_INTERVAL_MINUTES = 30  # <-- –î–û–ë–ê–í–ò–¢–¨

    DB_HOST = DatabaseConfig.DB_HOST
    DB_PORT = DatabaseConfig.DB_PORT
    DB_NAME = DatabaseConfig.DB_NAME
    DB_USER = DatabaseConfig.DB_USER
    DB_PASS = DatabaseConfig.DB_PASS
    
    # -----------------------------------------------------------------


# --- –ö–ª–∞—Å—Å TelegramListener ---
class TelegramListener:
    """
    –ö–ª–∞—Å—Å-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –∏ –ë–î.
    2. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏—Ö—Å—è –∫–∞–Ω–∞–ª–∞—Ö.
    3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ PostgreSQL.
    """
    def __init__(self, client: TelegramClient):
            self.client = client
            self.bot_entity = None 
            self.private_group_entity = None
            self.monitored_channel_identifiers = self._load_monitored_channels() 
            self.db_pool = None 
            self.last_channels_update = None


    async def _update_monitored_channels(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏—Ö—Å—è –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–ª—É—á–∞—è —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        try:
            logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏—Ö—Å—è –∫–∞–Ω–∞–ª–æ–≤...")
            
            channels_list = []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
            async for dialog in self.client.iter_dialogs():
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã (is_channel = True)
                if dialog.is_channel:
                    entity = dialog.entity
                    
                    channel_data = {
                        'id': entity.id,
                        'title': getattr(entity, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        'username': getattr(entity, 'username', None),
                        'participants_count': getattr(entity, 'participants_count', 0),
                        'broadcast': getattr(entity, 'broadcast', False),
                        'megagroup': getattr(entity, 'megagroup', False),
                    }
                    
                    channels_list.append(channel_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ monitored_channels.json
            with open(Config.CHANNELS_FILE, 'w', encoding='utf-8') as f:
                json.dump(channels_list, f, ensure_ascii=False, indent=2)
            
            # –û–ë–ù–û–í–õ–Ø–ï–ú –ü–†–ê–í–ò–õ–¨–ù–û - –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
            channel_ids = set()
            for channel in channels_list:
                channel_ids.add(str(channel['id']))
            
            old_count = len(self.monitored_channel_identifiers)
            self.monitored_channel_identifiers = channel_ids
            self.last_channels_update = datetime.now()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            logging.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω! –ë—ã–ª–æ: {old_count}, —Å—Ç–∞–ª–æ: {len(channel_ids)} –∫–∞–Ω–∞–ª–æ–≤")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")



    async def _channels_update_loop(self):
        """
        –¶–∏–∫–ª –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.
        """
        while True:
            try:
                # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
                if self.last_channels_update is None:
                    await self._update_monitored_channels()
                
                # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                await asyncio.sleep(Config.CHANNELS_UPDATE_INTERVAL_MINUTES * 60)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
                await self._update_monitored_channels()
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    # --- –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
    async def _setup_database(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏–∑ Database –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        """
        logging.info("Listener: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø—É–ª –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
            self.db_pool = await Database.get_pool()  # <-- –ò–ó–ú–ï–ù–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
            logging.info("Listener: –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É –ª–æ–≥–∏–∫—É)
            async with self.db_pool.acquire() as conn:
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS telegram_posts (
                        id BIGSERIAL PRIMARY KEY,
                        post_time TIMESTAMP WITH TIME ZONE NOT NULL, 
                        text_content TEXT NOT NULL,
                        message_link TEXT,
                        finished BOOLEAN DEFAULT FALSE,
                        analyzed BOOLEAN DEFAULT FALSE,
                        filter_initial BOOLEAN,
                        filter_initial_explain TEXT,
                        context BOOLEAN,
                        context_score REAL,
                        context_explain TEXT,
                        essence BOOLEAN,
                        essence_score REAL,
                        essence_explain TEXT                    
                    );
                """)
                logging.info("–¢–∞–±–ª–∏—Ü–∞ 'telegram_posts' —Å–æ–∑–¥–∞–Ω–∞/–≥–æ—Ç–æ–≤–∞.")
            
        except Exception as e:
            logging.critical(f"Listener: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    async def _save_message_to_db(self, data: dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î."""
        if not self.db_pool:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        try:
            async with self.db_pool.acquire() as conn:
                # –í INSERT-–∑–∞–ø—Ä–æ—Å–µ –Ω–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–µ 'finished', —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 
                # –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ DEFAULT FALSE, –∑–∞–¥–∞–Ω–Ω–æ–µ –≤ —Å—Ö–µ–º–µ —Ç–∞–±–ª–∏—Ü—ã.
                await conn.execute("""
                    INSERT INTO telegram_posts (post_time, text_content, message_link)
                    VALUES ($1, $2, $3)
                """, 
                data['post_time'], data['text'], data['link']) # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á 'text'
            
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î –∏–∑ '{data['title']}' (Post Time: {data['post_time']}).")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def _resolve_entities(self): 
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã (Entity) –¥–ª—è –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã 
        –ø–æ –∏—Ö ID/—é–∑–µ—Ä–Ω–µ–π–º–∞–º.
        """
        try:
            self.bot_entity = await self.client.get_entity(Config.BOT_USERNAME)
            logging.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–æ—Ç—É: {Config.BOT_USERNAME}")
            
            self.private_group_entity = await self.client.get_entity(Config.PRIVATE_GROUP_ID)
            logging.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ: {getattr(self.private_group_entity, 'title', Config.PRIVATE_GROUP_ID)}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–¥–Ω–æ–π –∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}")
            raise

    async def _get_original_message_link(self, chat_entity, message_id: int) -> str | None:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º (t.me/username/id), 
        –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö - c/ID (t.me/c/ID/id).
        """
        if not chat_entity: return None
        username = getattr(chat_entity, 'username', None)
        if username:
            return f"https://t.me/{username}/{message_id}"
        elif getattr(chat_entity, 'id', None):
            return f"https://t.me/c/{abs(chat_entity.id)}/{message_id}"
        return None

    def _load_monitored_channels(self) -> set[str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞ 'monitored_channels.json'.
        """
        if os.path.exists(Config.CHANNELS_FILE):
            try:
                with open(Config.CHANNELS_FILE, 'r', encoding='utf-8') as f:
                    channels_data = json.load(f)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–æ–≤
                channel_ids = set()
                channel_info_list = []
                
                for channel in channels_data:
                    channel_id = str(channel['id'])
                    channel_ids.add(channel_id)
                    channel_info = {
                        'id': channel_id,
                        'title': channel.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        'username': channel.get('username', '–Ω–µ—Ç username')
                    }
                    channel_info_list.append(channel_info)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                logging.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(channel_ids)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                logging.info("üìã –°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏—Ö—Å—è –∫–∞–Ω–∞–ª–æ–≤:")
                for i, channel in enumerate(channel_info_list, 1):
                    username_display = f"@{channel['username']}" if channel['username'] != '–Ω–µ—Ç username' else "–±–µ–∑ username"
                    logging.info(f"    {i:2d}. {channel['title']:40} (ID: {channel['id']:15}) {username_display}")
                
                return channel_ids
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {e}") 
                return set()
        
        logging.info(f"–§–∞–π–ª {Config.CHANNELS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")
        return set()

    async def _private_group_message_handler(self, event: events.NewMessage.Event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–∏—à–µ–¥—à–∏—Ö –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã (Config.PRIVATE_GROUP_ID).
        –≠—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –±–æ—Ç—É-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—É.
        """
        try:
            if event.chat_id != Config.PRIVATE_GROUP_ID: return
            message = event.message
            text_content = message.text or message.caption or ""
            if not text_content.strip(): return
            logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ: {text_content[:100]}...")
            await self.client.send_message(
                entity=self.bot_entity,
                message=text_content.strip(),
                link_preview=False
            )
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –±–æ—Ç—É {Config.BOT_USERNAME}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã: {e}", exc_info=True)

    async def _message_event_handler(self, event: events.NewMessage.Event):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤. 
        –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è.
        """
        try:
            chat = getattr(event, 'chat', None)
            message = event.message
            text_content = message.text or message.caption or ""

            if not chat or not text_content.strip(): return

            chat_identifiers = set()
            chat_username = getattr(chat, 'username', '').lower()
            chat_id = getattr(chat, 'id', None)

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ (—é–∑–µ—Ä–Ω–µ–π–º, ID —Å–æ –∑–Ω–∞–∫–æ–º –∏ –±–µ–∑)
            if chat_username: chat_identifiers.add(chat_username)
            if chat_id:
                chat_identifiers.add(str(chat_id))
                chat_identifiers.add(str(abs(chat_id))) 

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏.
            is_monitored_channel = not self.monitored_channel_identifiers.isdisjoint(chat_identifiers)
            
            if not is_monitored_channel: return

            source_channel_title = getattr(chat, 'title', f'Channel @{chat_username}' if chat_username else f'Channel ID:{chat_id}')

            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            message_data = {
                'post_time': message.date.replace(tzinfo=None) if message.date else datetime.now(), 
                'text': text_content,
                'link': None,
                'title': source_channel_title
            }

            message_link = None
            original_source_title = source_channel_title

            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º 
            if not message.fwd_from:
                message_link = await self._get_original_message_link(chat, message.id)

            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ (forwarded) 
            else:
                fwd_from = message.fwd_from
                if fwd_from and fwd_from.from_id and isinstance(fwd_from.from_id, PeerChannel) and fwd_from.channel_post:
                    channel_id = fwd_from.from_id.channel_id
                    message_id = fwd_from.channel_post
                    message_link = f"https://t.me/c/{channel_id}/{message_id}"
                    
                    try:
                        original_entity = await self.client.get_entity(fwd_from.from_id)
                        if getattr(original_entity, 'username', None):
                            message_link = f"https://t.me/{original_entity.username}/{message_id}"
                        if getattr(original_entity, 'title', None): 
                            original_source_title = original_entity.title
                    except Exception:
                        pass

            if message_link:
                message_data['link'] = message_link
            else:
                message_data['link'] = f"–ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {original_source_title}"
                    
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
            await self._save_message_to_db(message_data)
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

    async def start_monitoring(self):
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞: 
        1. –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ (—á–∞—Ç—ã/–±–æ—Ç—ã).
        2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ë–î.
        3. –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Telegram.
        4. –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.
        """
        await self._resolve_entities() 
        await self._setup_database() 
        
        self.client.add_event_handler(self._message_event_handler, events.NewMessage())
        self.client.add_event_handler(self._private_group_message_handler, events.NewMessage(
            chats=[Config.PRIVATE_GROUP_ID]
        ))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        asyncio.create_task(self._channels_update_loop())
        
        logging.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–ø—É—â–µ–Ω—ã...")
        logging.info(f"üì° –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ {Config.CHANNELS_UPDATE_INTERVAL_MINUTES} –º–∏–Ω—É—Ç")


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π ---
async def create_and_save_session(session_name: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é TelegramClient, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é 
    (—Ç–µ–ª–µ—Ñ–æ–Ω, –∫–æ–¥, –ø–∞—Ä–æ–ª—å 2FA), –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤ —Ñ–∞–π–ª.
    """
    logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —Å –∏–º–µ–Ω–µ–º '{session_name}'.")
    
    client = TelegramClient(StringSession(), Config.API_ID, Config.API_HASH)
    
    try:
        await client.connect()
        if not await client.is_user_authorized():
            logging.info("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            user_phone = input('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤–∫–ª—é—á–∞—è –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã): ')
            await client.start(phone=user_phone,
                               password=lambda: input('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 2FA): '),
                               code_callback=lambda: input('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π Telegram: '))
            logging.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")

        session_string = client.session.save()
        logging.info("–°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞.")
        
        with open(f"{session_name}.session", "w") as f:
            f.write(session_string)
        logging.info(f"–°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª '{session_name}.session'.")
        
        return session_string
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        raise
    finally:
        if client.is_connected():
            await client.disconnect()

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ app.py ---
async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É. 
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É/—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –∑–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telegram.
    """
    session_string = None
    session_file_name = "telegram_forwarder_session"

    # 1. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏
    try:
        with open(f"{session_file_name}.session", "r") as f:
            session_string = f.read().strip()
        logging.info("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞.")
    except FileNotFoundError:
        logging.warning(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ '{session_file_name}.session' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {e}. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.")

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
    if not session_string:
        session_string = await create_and_save_session(session_file_name)

    if not session_string:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—É—é —Å–µ—Å—Å–∏—é. –í—ã—Ö–æ–¥.")
        return

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
    client = TelegramClient(StringSession(session_string), Config.API_ID, Config.API_HASH)
    
    try:
        logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏...")
        await client.start()
        
        if not await client.is_user_authorized():
            logging.error("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏.")
            return
        logging.info("–ö–ª–∏–µ–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.")

        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        listener = TelegramListener(client) 
        await listener.start_monitoring()
        
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        await client.run_until_disconnected()
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    finally:
        # 5. –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if client.is_connected():
            logging.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")
            await client.disconnect()
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É.")

if __name__ == '__main__':
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è), –∑–∞–ø—É—Å–∫–∞–µ–º main().
    asyncio.run(main())